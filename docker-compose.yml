services:
  keycloak_postgres:
    image: postgres:15
    container_name: keycloak_postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    networks:
      - backend
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "3G"
        reservations:
          memory: "2G"

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    container_name: keycloak
    command: [
        "start",
        "--hostname-strict=false",
        "--http-relative-path=/auth",
        "--proxy=edge"
    ]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak_postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_PROXY: edge
      KC_HOSTNAME: www.minecraftoffline.net
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: true
    depends_on:
      keycloak_postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "6G"
        reservations:
          memory: "4G"

  app_postgres:
    image: postgres:15
    container_name: app_postgres
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: myapp
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD}
    volumes:
      - app-db-data:/var/lib/postgresql/data
    networks:
      - backend
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myapp -d myapp"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "3G"
        reservations:
          memory: "2G"

  server:
    build: ./server
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: "4.0"
          memory: "8G"
        reservations:
          memory: "4G"
    env_file:
      - ./server/.env
    depends_on:
      app_postgres:
        condition: service_healthy
    networks:
      - backend
    expose:
      - "4000"

  client:
    build: ./client
    container_name: react-build
    command: sh -c "npm run build"
    # Here we mount a named volume so that the build output is saved to a location that nginx can use.
    volumes:
      - react-build:/usr/src/app/build
    depends_on:
      server:
        condition: service_started
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "2G"
        reservations:
          memory: "1G"

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      client:
        condition: service_completed_successfully
      server:
        condition: service_started
    volumes:
      - ./nginx/landing:/usr/share/nginx/landing:ro
      # Mount the same volume here (read-only) so nginx can serve the build artifacts.
      - react-build:/usr/share/nginx/game:ro
      - ./nginx/certs:/etc/ssl:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: "2G"
        reservations:
          memory: "1G"

volumes:
  keycloak-db-data:
  app-db-data:
  react-build:

networks:
  backend:
    driver: bridge
